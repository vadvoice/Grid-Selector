{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FEATURES","BoxCell","cellData","rest","cellStyle","active","background","style","App","GRID_CELL_CLASS_NAME","weekDays","useState","rowIndex","idx","startPoint","setStartPoint","isArrowVisible","setIsArrowVisible","map","day","rowIdx","columnAmount","Array","fill","_","rowBuilder","grid","setGrid","arrowRef","useRef","gridRef","className","ref","onMouseMove","e","includes","ax","ay","bx","by","distance","Math","sqrt","pow","degree","atan","PI","current","top","left","transform","width","lineDraw","clientX","clientY","display","row","cell","onMouseDown","gridClone","activeRow","targetCell","splice","onSelectionStart","onMouseUp","endPoint","target","booleanOperation","rowDifference","forEach","onSelectionEnd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da5e5751.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport \"./App.css\";\n\n// ['MOUSE_TRACK']\nconst FEATURES = [];\n\n// row builder\nconst rowBuilder = ({ columnAmount = 10, rowIdx = 0 }) => {\n  return Array(columnAmount)\n    .fill()\n    .map((_, idx) => ({ rowIndex: rowIdx, idx, active: false }));\n};\n\n// TODO: move to separate file\nconst BoxCell = ({ cellData, ...rest }) => {\n  const { active } = cellData;\n  const cellStyle = active ? { background: \"#04D4F0\" } : {};\n  return <div style={cellStyle} {...rest}></div>;\n};\n\nexport default function App() {\n  const GRID_CELL_CLASS_NAME = \"Grid-row-cell\";\n  const defaultCellState = { rowIndex: 0, idx: 0, active: false };\n  const weekDays = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ];\n  const [startPoint, setStartPoint] = useState(defaultCellState);\n  const [isArrowVisible, setIsArrowVisible] = useState(false);\n  const [grid, setGrid] = useState(\n    weekDays.map((day, rowIdx) => rowBuilder({ columnAmount: 12, rowIdx }))\n  );\n  const arrowRef = useRef();\n  const gridRef = useRef();\n\n  const onSelectionStart = (e, { rowIndex, idx, active }) => {\n    const gridClone = [...grid];\n    const activeRow = gridClone[rowIndex];\n    const targetCell = activeRow[idx];\n    targetCell.active = !targetCell.active;\n    gridClone.splice(rowIndex, 1, activeRow);\n\n    setStartPoint({ rowIndex, idx, active: !active });\n    setGrid(gridClone);\n    if (FEATURES.includes(\"MOUSE_TRACK\")) {\n      setIsArrowVisible(true);\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isArrowVisible || !FEATURES.includes(\"MOUSE_TRACK\")) {\n      return;\n    }\n    function lineDraw(ax, ay, bx, by) {\n      if (ax > bx) {\n        bx = ax + bx;\n        ax = bx - ax;\n        bx = bx - ax;\n\n        by = ay + by;\n        ay = by - ay;\n        by = by - ay;\n      }\n\n      let distance = Math.sqrt(Math.pow(bx - ax, 2) + Math.pow(by - ay, 2));\n      let calc = Math.atan((by - ay) / (bx - ax));\n      let degree = (calc * 180) / Math.PI;\n\n      arrowRef.current.style.top = ay + \"px\";\n      arrowRef.current.style.left = ax + \"px\";\n      arrowRef.current.style.transform = `rotate(${degree}deg)`;\n      arrowRef.current.style.width = `${distance}px`;\n    }\n\n    // TODO: track cursor\n    lineDraw(\n      startPoint.idx * 30,\n      startPoint.rowIndex * 30,\n      e.clientX - 10,\n      e.clientY - 100\n    );\n  };\n\n  const onSelectionEnd = (e, endPoint) => {\n    const { target } = e;\n    // prevent selection\n    if (target.className !== GRID_CELL_CLASS_NAME) {\n      return;\n    }\n    // do this shit!\n    const booleanOperation = startPoint.active ? true : false;\n    const gridClone = [...grid];\n    // positive - bottom, negative - top\n    const rowDifference = endPoint.rowIndex - startPoint.rowIndex;\n    // positive - right, negative - left\n    // const columnDifference = endPoint.idx - startPoint.idx;\n\n    // fill cell logic depending on direction\n    gridClone.forEach((row, rowIndex) => {\n      row.forEach((cell) => {\n        if (rowDifference >= 0) {\n          if (\n            // right => left && left => right\n            (rowIndex >= startPoint.rowIndex &&\n              rowIndex <= endPoint.rowIndex &&\n              cell.idx >= startPoint.idx &&\n              cell.idx <= endPoint.idx) ||\n            (startPoint.rowIndex <= rowIndex &&\n              endPoint.rowIndex >= rowIndex &&\n              startPoint.idx >= cell.idx &&\n              endPoint.idx <= cell.idx)\n          ) {\n            cell.active = booleanOperation;\n          }\n        }\n        if (rowDifference < 0) {\n          if (\n            // left => right && right => left\n            (rowIndex >= endPoint.rowIndex &&\n              rowIndex <= startPoint.rowIndex &&\n              cell.idx >= endPoint.idx &&\n              cell.idx <= startPoint.idx) ||\n            (startPoint.rowIndex >= rowIndex &&\n              endPoint.rowIndex <= rowIndex &&\n              startPoint.idx <= cell.idx &&\n              endPoint.idx >= cell.idx)\n          ) {\n            cell.active = booleanOperation;\n          }\n        }\n      });\n    });\n\n    // update structure && draw\n    setGrid(gridClone);\n\n    //\n    setIsArrowVisible(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Grid\" ref={gridRef} onMouseMove={handleMouseMove}>\n        <div\n          className=\"Grid-cursor-straight\"\n          style={{ display: isArrowVisible ? \"block\" : \"none\" }}\n          ref={arrowRef}\n        ></div>\n        {/* FIXME: redo */}\n        <header className=\"Grid-header\">\n          <div className=\"Grid-header-weekdayBlank\"></div>\n          {Array(12)\n            .fill()\n            .map((_, idx) => (\n              <div key={`timeslot-${idx}`} className=\"Grid-header-timecell\">\n                {idx + 1}\n              </div>\n            ))}\n        </header>\n        {grid.map((row, idx) => {\n          return (\n            <div className=\"Grid-row\" key={idx}>\n              <div className=\"Grid-row-weekday\">{weekDays[idx]}</div>\n              {row.map((cell) => {\n                return (\n                  // TODO: top line... time slots\n                  <BoxCell\n                    key={`${cell.rowIndex}_${cell.idx}`}\n                    className={GRID_CELL_CLASS_NAME}\n                    cellData={cell}\n                    onMouseDown={(e) => onSelectionStart(e, cell)}\n                    onMouseUp={(e) => onSelectionEnd(e, cell)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}